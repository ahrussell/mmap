# This file was *autogenerated* from the file ggh.sage.
from sage.all_cmdline import *   # import sage library

print R.ideal([x**2 + 1])

class MMP():
    def __init__(self, lam, k):
        n = lam**2 * k
        q = 2**(8*k*lam) * n**k # TODO: make a prime
        sigma = sqrt(lambda*n)
        sigma_prime = lambda * n * sqrt(n)

        S = PolynomialRing(ZZ, 'x')
        R = S.quotient_ring(S.ideal([x**n + 1]))

        Sq = PolynomialRing(Zmod(q), 'x')
        Rq = Sq.quotient_ring(Sq.ideal([x**n + 1]))

        




    def sample(self):
        return 0

    def is_zero(self, c):
        return False

if __name__=="__main__":
    lam = 20
    k = 5

    map = MMP(lam, k)
    encodings = [map.sample() for i in range(k)]

    result = 1

    for c in encodings:
        result *= c

    print map.is_zero(result)
